package spca.datalayer;

import java.sql.SQLException;

public interface DataContext {
	public DataResult addAnimal(String name, String chipNum, Integer animalType, Integer sourceCity, Integer animalSource, Boolean specialNeeds) throws SQLException;
	public DataResult addAnimalEventType(String name, Integer typeGroup) throws SQLException;
	public DataResult addAnimalEventTypeGroup(String name) throws SQLException;
	public DataResult addAnimalSource(String name) throws SQLException;
	public DataResult addAnimalType(String name) throws SQLException;
	public DataResult addBalanceTarget(java.sql.Timestamp startDate, java.sql.Timestamp endDate, double amount, String name) throws SQLException;
	public DataResult addCity(String name) throws SQLException;
	public DataResult addContactType(String name, Integer contactTypeGroup) throws SQLException;
	public DataResult addContactTypeGroup(String name) throws SQLException;
	public DataResult addEvent(Integer eventType, Integer animalId, java.sql.Timestamp dueDate, java.sql.Timestamp date, String details, Integer contactInvolved) throws SQLException;
	public DataResult addOrUpdateContact(String firstName, String lastName, String phone_1, String phone_2, String email_1, String email_2, String address, Integer city, String otherDetails, String identityCard, java.sql.Timestamp birthDate) throws SQLException;
	public DataResult addPayment(Integer transactionId, Integer paymentType, Integer amount) throws SQLException;
	public DataResult addPaymentType(String name) throws SQLException;
	public DataResult addSettings(Integer id, String name, String value) throws SQLException;
	public DataResult addTransaction(Integer contactInvolved, Integer animalInvolved, Integer transactionType, Integer relatedEvent, String comments, String invoiceNumber) throws SQLException;
	public DataResult addTransactionItem(String comments, Integer amount, Integer transactionID) throws SQLException;
	public DataResult addTransactionType(String name) throws SQLException;
	public DataResult addTypeForContact(Integer contactId, Integer contactType) throws SQLException;
	public DataResult deleteAnimalEventType(Integer id) throws SQLException;
	public DataResult deleteAnimalEventTypeGroup(Integer id) throws SQLException;
	public DataResult deleteAnimalSource(Integer id) throws SQLException;
	public DataResult deleteAnimalType(Integer id) throws SQLException;
	public DataResult deleteBalanceTarget(Integer id) throws SQLException;
	public DataResult deleteCities(Integer id) throws SQLException;
	public DataResult deleteContactType(Integer id) throws SQLException;
	public DataResult deleteContactTypeGroup(Integer id) throws SQLException;
	public DataResult deletePaymentType(Integer id) throws SQLException;
	public DataResult deleteSettings(Integer id) throws SQLException;
	public DataResult deleteTransactionType(Integer id) throws SQLException;
	public DataResult deleteTypeForContact(Integer contactId, Integer contactType) throws SQLException;
	public DataResult getAllProcedures() throws SQLException;
	public DataResult getAnimalEventType() throws SQLException;
	public DataResult getAnimalEventTypeByGroup(Integer typeGroup) throws SQLException;
	public DataResult getAnimalEventTypeGroups() throws SQLException;
	public DataResult getAnimals(Integer[] animalIds, String animalName, Integer[] animalSources, Integer[] animalSourceCities, Integer[] animalTypes) throws SQLException;
	public DataResult getAnimalSources() throws SQLException;
	public DataResult getAnimalTypes() throws SQLException;
	public DataResult getBalanceTarget(String ids, java.sql.Timestamp startDate, java.sql.Timestamp endDate) throws SQLException;
	public DataResult getCities() throws SQLException;
	public DataResult getContacts(Integer[] contactIds, Integer[] contactTypes, Integer[] contactTypeGroups, String contactName, Integer minAge) throws SQLException;
	public DataResult getContactTypeGroups() throws SQLException;
	public DataResult getContactTypes() throws SQLException;
	public DataResult getContactTypesByGroup(Integer contactTypeGroup) throws SQLException;
	public DataResult getEvents(Integer[] eventTypes, Integer[] eventTypeGroups, Integer[] animalIds, java.sql.Timestamp[] eventDates, Boolean openedEvents, java.sql.Timestamp startDate, java.sql.Timestamp endDate, Integer[] contactsInvolved) throws SQLException;
	public DataResult getItemsForTransaction(Integer transactionID) throws SQLException;
	public DataResult getMembersThatHasntPayed(Integer year) throws SQLException;
	public DataResult getPaymentsForTransaction(Integer transactionID) throws SQLException;
	public DataResult getPaymentsReports(Integer[] animalIds, java.sql.Timestamp[] paymentDates, Integer[] contactsIds, Integer[] paymentTypes, Integer[] transactionTypes) throws SQLException;
	public DataResult getPaymentTypes() throws SQLException;
	public DataResult getProcedureParams(String procedureName) throws SQLException;
	public DataResult getSetting(Integer id) throws SQLException;
	public DataResult getTransactions(Integer[] transactionIds, Integer[] transactionType, Integer[] eventTypes, Integer[] eventTypeGroups, Integer[] animalIds, java.sql.Timestamp[] transactionDates, java.sql.Timestamp startDate, java.sql.Timestamp endDate, Boolean unpaiedTransaction) throws SQLException;
	public DataResult getTransactionType() throws SQLException;
	public DataResult updateAnimal(Integer id, String name, String chipNum, Integer animalType, Integer sourceCity, Integer animalSource, Boolean specialNeeds) throws SQLException;
	public DataResult updateAnimalEventType(Integer id, String name) throws SQLException;
	public DataResult updateAnimalEventTypeGroup(Integer id, String name) throws SQLException;
	public DataResult updateAnimalSource(Integer id, String name) throws SQLException;
	public DataResult updateAnimalType(Integer id, String name) throws SQLException;
	public DataResult updateBalanceTarget(Integer id, java.sql.Timestamp startDate, java.sql.Timestamp endDate, double amount, String name) throws SQLException;
	public DataResult updateCities(Integer id, String name) throws SQLException;
	public DataResult updateContactType(Integer id, String name) throws SQLException;
	public DataResult updateContactTypeGroup(Integer id, String name) throws SQLException;
	public DataResult updateEvent(Integer id, Integer eventType, Integer animalId, java.sql.Timestamp dueDate, java.sql.Timestamp date, String details, Integer contactInvolved) throws SQLException;
	public DataResult updatePayment(Integer id, Integer transactionId, Integer paymentType, Integer amount) throws SQLException;
	public DataResult updatePaymentType(Integer id, String name) throws SQLException;
	public DataResult updateSetting(Integer id, String value) throws SQLException;
	public DataResult updateSettings(Integer id, String name, String value) throws SQLException;
	public DataResult updateSTransactionType(Integer id, String value) throws SQLException;
	public DataResult updateTransaction(Integer id, Integer contactInvolved, Integer animalInvolved, Integer transactionType, Integer relatedEvent, String comments, String invoiceNumber) throws SQLException;
	public DataResult updateTransactionItem(Integer id, String comments, Integer amount, Integer transactionID) throws SQLException;
}
